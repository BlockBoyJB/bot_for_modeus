package tgmodel

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"strconv"
	"time"
)

const (
	txtBackButton = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
)

var nums = map[int]string{
	0: "0Ô∏è‚É£",
	1: "1Ô∏è‚É£",
	2: "2Ô∏è‚É£",
	3: "3Ô∏è‚É£",
	4: "4Ô∏è‚É£",
	5: "5Ô∏è‚É£",
	6: "6Ô∏è‚É£",
	7: "7Ô∏è‚É£",
	8: "8Ô∏è‚É£",
	9: "9Ô∏è‚É£",
}

var SettingsButtons = [][]tgbotapi.InlineKeyboardButton{
	{tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å", "/add_login_password"), tgbotapi.NewInlineKeyboardButtonData("–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û", "/update_full_name")},
}

var YesOrNoButtons = [][]tgbotapi.InlineKeyboardButton{
	{tgbotapi.NewInlineKeyboardButtonData("–î–∞", "–¥–∞"), tgbotapi.NewInlineKeyboardButtonData("–ù–µ—Ç", "–Ω–µ—Ç")},
}

func OtherStudentButtons(scheduleId string) [][]tgbotapi.InlineKeyboardButton {
	now := time.Now()
	return [][]tgbotapi.InlineKeyboardButton{
		{
			tgbotapi.NewInlineKeyboardButtonData("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å", formatScheduleButtonsData(now, "day", scheduleId, "student")),
			tgbotapi.NewInlineKeyboardButtonData("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é", formatScheduleButtonsData(now, "week", scheduleId, "student")),
		},
		{tgbotapi.NewInlineKeyboardButtonData(txtBackButton, "/choose_other_student_back")},
	}
}

var MyProfileButtons = [][]tgbotapi.InlineKeyboardButton{
	{tgbotapi.NewInlineKeyboardButtonData("–û–±–æ –º–Ω–µ", "/about_me"), tgbotapi.NewInlineKeyboardButtonData("–†–µ–π—Ç–∏–Ω–≥–∏", "/ratings")},
}

var HelpButtons = [][]tgbotapi.InlineKeyboardButton{
	{
		tgbotapi.NewInlineKeyboardButtonData("üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "/help_schedule"),
		tgbotapi.NewInlineKeyboardButtonData("üìä –û—Ü–µ–Ω–∫–∏", "/help_grades"),
	},
	{
		tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüéìüë©‚Äçüéì –î—Ä—É–∑—å—è", "/help_friends"),
		tgbotapi.NewInlineKeyboardButtonData("üë• –î—Ä—É–≥–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã", "/help_other_student"),
	},
	{
		tgbotapi.NewInlineKeyboardButtonData("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "/help_settings"),
		tgbotapi.NewInlineKeyboardButtonData("\U0001FAF5 –û–±–æ –º–Ω–µ", "/help_me"),
	},
	{
		tgbotapi.NewInlineKeyboardButtonData("üõ° –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "/help_support"),
		tgbotapi.NewInlineKeyboardButtonData("‚ùì FAQ", "/help_faq"),
	},
	{
		tgbotapi.NewInlineKeyboardButtonData("üè´ –ê–¥—Ä–µ—Å–∞ –∫–æ—Ä–ø—É—Å–æ–≤", "/help_buildings"),
	},
}

func NumbersButtons(k, size int) [][]tgbotapi.InlineKeyboardButton {
	// –ò–¥–µ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥—Å–º–æ—Ç—Ä–µ–ª —É aiogram KeyboardBuilder.adjust
	// https://docs.aiogram.dev/en/latest/utils/keyboard.html#aiogram.utils.keyboard.ReplyKeyboardBuilder.adjust
	var buttons [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton

	for i := 1; i <= k; i++ {
		if len(row) >= size {
			buttons = append(buttons, row)
			row = nil
		}
		row = append(row, tgbotapi.NewInlineKeyboardButtonData(formatNumber(i), fmt.Sprintf("%d", i)))
	}
	if len(row) != 0 {
		buttons = append(buttons, row)
	}
	return buttons
}

// BackButton –û–¥–Ω–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–Ω–∞–∑–∞–¥" –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∏
func BackButton(callback string) [][]tgbotapi.InlineKeyboardButton {
	return [][]tgbotapi.InlineKeyboardButton{{tgbotapi.NewInlineKeyboardButtonData(txtBackButton, callback)}}
}

func InlineRowButtons(data map[string]string, size int) [][]tgbotapi.InlineKeyboardButton {
	var buttons [][]tgbotapi.InlineKeyboardButton
	var row []tgbotapi.InlineKeyboardButton

	for k, v := range data {
		if len(row) >= size {
			buttons = append(buttons, row)
			row = nil
		}
		// –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–ª—é—á –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		row = append(row, tgbotapi.NewInlineKeyboardButtonData(v, k))
	}
	if len(row) != 0 {
		buttons = append(buttons, row)
	}
	return buttons
}

func dayButtons(now time.Time, bType, scheduleId, prefix string) [][]tgbotapi.InlineKeyboardButton {
	y := time.Date(now.Year(), now.Month(), now.Day()-1, 0, 0, 0, 0, now.Location())
	t := time.Date(now.Year(), now.Month(), now.Day()+1, 0, 0, 0, 0, now.Location())
	return [][]tgbotapi.InlineKeyboardButton{{
		tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("‚óÄÔ∏è %s", y.Format("02.01")), formatScheduleButtonsData(y, bType, scheduleId, prefix)),
		tgbotapi.NewInlineKeyboardButtonData(fmt.Sprintf("%s ‚ñ∂Ô∏è", t.Format("02.01")), formatScheduleButtonsData(t, bType, scheduleId, prefix)),
	}}
}

func formatScheduleButtonsData(t time.Time, bType, scheduleId, prefix string) string {
	return fmt.Sprintf("/%s/%s/%s/%s", prefix, bType, t.Format(time.DateOnly), scheduleId)
}

var UICommands = []tgbotapi.BotCommand{
	{Command: "start", Description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"},
	{Command: "help", Description: "–ü–æ–º–æ—â—å"},
	{Command: "day_schedule", Description: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å"},
	{Command: "week_schedule", Description: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"},
	{Command: "grades", Description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–ª—ã"},
	{Command: "friends", Description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–∑–µ–π"},
	{Command: "me", Description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ"},
	{Command: "settings", Description: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
	{Command: "other_student", Description: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"},
	{Command: "stop", Description: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"},
}

const (
	DayScheduleButton  = "üìô –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å"
	WeekScheduleButton = "üìö –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é"
	GradesButton       = "üìä –û—Ü–µ–Ω–∫–∏"
	FriendsButton      = "üë®‚Äçüéìüë©‚Äçüéì –î—Ä—É–∑—å—è"
	OtherStudentButton = "üë• –î—Ä—É–≥–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã"
	MeButton           = "\U0001FAF5 –û–±–æ –º–Ω–µ"
	SettingsButton     = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
	HelpButton         = "‚ùì –ü–æ–º–æ—â—å"
)

var RowCommands = [][]tgbotapi.KeyboardButton{
	{
		tgbotapi.NewKeyboardButton(DayScheduleButton),
		tgbotapi.NewKeyboardButton(WeekScheduleButton),
	},
	{
		tgbotapi.NewKeyboardButton(GradesButton),
		tgbotapi.NewKeyboardButton(FriendsButton),
	},
	{
		tgbotapi.NewKeyboardButton(OtherStudentButton),
		tgbotapi.NewKeyboardButton(MeButton),
	},
	{
		tgbotapi.NewKeyboardButton(SettingsButton),
		tgbotapi.NewKeyboardButton(HelpButton),
	},
}

func formatNumber(k int) string {
	if k < 10 {
		return nums[k]
	}
	var result string
	for _, s := range strconv.Itoa(k) {
		n, _ := strconv.Atoi(string(s))
		result += nums[n]
	}
	return result
}
