package v2

import (
	"bot_for_modeus/internal/model/tgmodel"
	"bot_for_modeus/internal/parser"
	"bot_for_modeus/internal/service"
	"bot_for_modeus/pkg/bot"
	"errors"
	"fmt"
)

type userRouter struct {
	user   service.User
	parser parser.Parser
}

func newUserRouter(b *bot.Bot, user service.User, parser parser.Parser) {
	r := &userRouter{
		user:   user,
		parser: parser,
	}

	b.Command("/start", r.cmdStart)
	b.Command("/kb", r.cmdKB)
	b.Callback("/cmd_start_back", r.callbackStartBack)
	b.State(stateInputFullName, r.stateInputFullName)
	b.State(stateChooseStudent, r.stateChooseStudent)
	b.State(stateActionAfterCreate, r.stateActionAfterCreate)
	b.State(stateAddLoginPasswordAfterCreate, r.stateAddLoginPasswordAfterCreate)
	b.Command("/stop", r.cmdStop)
	b.State(stateConfirmDelete, r.stateConfirmDelete)

	b.Command("/me", r.cmdMe)
	b.Message(tgmodel.MeButton, r.cmdMe)
	b.Callback("/me_back", r.callbackMeBack)
	b.Callback("/about_me", r.callbackAboutMe)
	b.Callback("/ratings", r.callbackRatings)
}

func (r *userRouter) cmdStart(c bot.Context) error {
	_ = c.Clear()
	if err := c.SetState(stateInputFullName); err != nil {
		return err
	}
	return c.SendMessageWithReplyKB(txtStart, tgmodel.RowCommands)
}

func (r *userRouter) cmdKB(c bot.Context) error {
	return c.SendMessageWithReplyKB("üëã", tgmodel.RowCommands)
}

func (r *userRouter) callbackStartBack(c bot.Context) error {
	if err := c.EditMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–¥–µ—É—Å"); err != nil {
		return err
	}
	return c.SetState(stateInputFullName)
}

func (r *userRouter) stateInputFullName(c bot.Context) error {
	if len(c.Text()) > 200 {
		return ErrIncorrectInput
	}
	students, err := r.parser.FindStudents(c.Text())
	if err != nil {
		return err
	}
	if err = c.SetData("students", students); err != nil {
		return err
	}
	text, kb := formatStudents(students)
	// –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –§–ò–û
	kb = append(kb, tgmodel.BackButton("/cmd_start_back")...)
	if err = c.SendMessageWithInlineKB(text, kb); err != nil {
		return err
	}
	return c.SetState(stateChooseStudent)
}

func (r *userRouter) stateChooseStudent(c bot.Context) error {
	s, err := findStudent(c)
	if err != nil {
		return err
	}

	input := service.UserInput{
		UserId:     c.UserId(),
		FullName:   s.FullName,
		ScheduleId: s.ScheduleId,
		GradesId:   s.GradesId,
	}
	if err = r.user.Create(c.Context(), input); err != nil {
		// –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
		if errors.Is(err, service.ErrUserAlreadyExists) {
			if e := c.DelData("grades_input"); e != nil {
				return e
			}
			if e := r.user.UpdateInfo(c.Context(), input); e != nil {
				return e
			}
			_, _ = lookupGI(c, r.user, false) // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º grades_input –≤ –∫—ç—à–µ
			return c.EditMessage("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
		}
		return err
	}

	if err = c.EditMessageWithInlineKB(txtUserCreated, tgmodel.YesOrNoButtons); err != nil {
		return err
	}
	return c.SetState(stateActionAfterCreate)
}

func (r *userRouter) stateActionAfterCreate(c bot.Context) error {
	if err := c.DelData("students", "state"); err != nil {
		return err
	}
	if c.Text() == "–¥–∞" {
		if err := c.EditMessage(txtAddLoginPassword); err != nil {
			return err
		}
		return c.SetState(stateAddLoginPasswordAfterCreate)
	}
	return c.EditMessageWithInlineKB("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"+txtUserAfterCreate, tgmodel.GuideButtons)
}

func (r *userRouter) stateAddLoginPasswordAfterCreate(c bot.Context) error {
	if err := addLoginPassword(c, r.user); err != nil {
		return err
	}
	return c.SendMessageWithInlineKB("–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"+txtUserAfterCreate, tgmodel.GuideButtons)
}

func (r *userRouter) cmdStop(c bot.Context) error {
	if err := c.SendMessageWithInlineKB(txtConfirmDelete, tgmodel.YesOrNoButtons); err != nil {
		return err
	}
	return c.SetState(stateConfirmDelete)
}

func (r *userRouter) stateConfirmDelete(c bot.Context) error {
	if c.Text() != "–¥–∞" {
		return c.EditMessage("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–¥–∞–ª–µ–Ω!")
	}
	u, err := r.user.Find(c.Context(), c.UserId())
	if err != nil {
		return err
	}
	if u.Login != "" {
		if err = r.parser.DeleteToken(u.Login); err != nil {
			return err
		}
	}
	if err = c.Clear(); err != nil {
		return err
	}
	if err = r.user.Delete(c.Context(), c.UserId()); err != nil {
		return err
	}
	return c.EditMessage(txtUserDeleted)
}

var (
	kbMeBack = tgmodel.BackButton("/me_back")
)

func (r *userRouter) cmdMe(c bot.Context) error {
	return c.SendMessageWithInlineKB(txtMyProfile, tgmodel.MyProfileButtons)
}

func (r *userRouter) callbackMeBack(c bot.Context) error {
	return c.EditMessageWithInlineKB(txtMyProfile, tgmodel.MyProfileButtons)
}

func (r *userRouter) callbackAboutMe(c bot.Context) error {
	gi, err := lookupGI(c, r.user, false)
	if err != nil {
		return err
	}
	info, err := r.parser.FindStudentById(gi.ScheduleId)
	if err != nil {
		return err
	}
	text := "–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è:\n\n"
	text += fmt.Sprintf(formatStudent, info.FullName, info.SpecialtyName, info.SpecialtyProfile, info.FlowCode)
	return c.EditMessageWithInlineKB(text, kbMeBack)
}

func (r *userRouter) callbackRatings(c bot.Context) error {
	gi, err := lookupGI(c, r.user, true)
	if err != nil {
		return err
	}
	if gi.Login == "" || gi.Password == "" {
		kb := append(tgmodel.GradesLink, kbMeBack...)
		return c.EditMessageWithInlineKB(txtRequiredLoginPass, kb)
	}

	cgpa, ratings, err := r.parser.Ratings(gi)
	if err != nil {
		return err
	}

	text := "–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–∏—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö:\n–¢–µ–∫—É—â–∏–π CGPA: " + cgpa + "\n"
	for _, sem := range ratings {
		text += "\n" + fmt.Sprintf(formatSemester, sem.Name, sem.GPA, sem.PresentRate, sem.AbsentRate, sem.UndefinedRate) + "\n"
	}
	return c.EditMessageWithInlineKB(text, kbMeBack)
}
