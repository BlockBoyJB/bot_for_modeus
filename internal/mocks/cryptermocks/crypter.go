// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/crypter/crypter.go

// Package cryptermocks is a generated GoMock package.
package cryptermocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCrypter is a mock of Crypter interface.
type MockCrypter struct {
	ctrl     *gomock.Controller
	recorder *MockCrypterMockRecorder
}

// MockCrypterMockRecorder is the mock recorder for MockCrypter.
type MockCrypterMockRecorder struct {
	mock *MockCrypter
}

// NewMockCrypter creates a new mock instance.
func NewMockCrypter(ctrl *gomock.Controller) *MockCrypter {
	mock := &MockCrypter{ctrl: ctrl}
	mock.recorder = &MockCrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypter) EXPECT() *MockCrypterMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockCrypter) Decrypt(text string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", text)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockCrypterMockRecorder) Decrypt(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockCrypter)(nil).Decrypt), text)
}

// Encrypt mocks base method.
func (m *MockCrypter) Encrypt(text string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", text)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockCrypterMockRecorder) Encrypt(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockCrypter)(nil).Encrypt), text)
}
