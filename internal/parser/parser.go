package parser

import (
	"bot_for_modeus/internal/repo"
	"bot_for_modeus/pkg/modeus"
	"bot_for_modeus/pkg/redis"
	"context"
	"errors"
	log "github.com/sirupsen/logrus"
	"time"
)

const (
	parserServicePrefixLog = "/parser"
	defaultParserTimeout   = time.Minute
	tokenPrefix            = "token:"
	defaultTTL             = time.Hour*23 + time.Minute*50
)

var lessonTypes = map[string]string{
	"LECT":        "‚úçÔ∏è –õ–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
	"LAB":         "üî¨ –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
	"SEMI":        "üß™ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
	"CUR_CHECK":   "üî´ –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
	"CONS":        "üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
	"EVENT_OTHER": "üìå –ü—Ä–æ—á–µ–µ",
	"SELF":        "üïØ –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
	"FINAL_CHECK": "ü™ì –ò—Ç–æ–≥–æ–≤–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è",
	"MID_CHECK":   "üî™ –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è",
}

type Parser interface {
	FindStudents(ctx context.Context, fullName string) ([]Student, error)
	FindStudentById(ctx context.Context, scheduleId string) (Student, error)

	DaySchedule(ctx context.Context, scheduleId string, now time.Time) ([]Lesson, error)
	WeekSchedule(ctx context.Context, scheduleId string, now time.Time) (map[int][]Lesson, error)
	DayGrades(ctx context.Context, day time.Time, input GradesInput) ([]SubjectDayGrades, error)

	SemesterTotalGrades(ctx context.Context, input GradesInput, semester Semester) ([]SubjectGrades, error)
	Ratings(ctx context.Context, input GradesInput) (string, map[int]SemesterResult, error)

	FindCurrentSemester(ctx context.Context, input GradesInput) (Semester, error)
	FindAllSemesters(ctx context.Context, input GradesInput) (map[string]Semester, error)

	FindSemesterSubjects(ctx context.Context, input GradesInput, semester Semester) (map[string]string, error)
	SubjectDetailedInfo(ctx context.Context, input GradesInput, semester Semester, subjectId string) (map[int]LessonGrades, error)
}

type parser struct {
	user      repo.User
	modeus    modeus.Parser
	redis     redis.Redis
	rootLogin string
	rootPass  string
}

func NewParserService(user repo.User, modeus modeus.Parser, redis redis.Redis, rootLogin, rootPass string) Parser {
	return &parser{
		user:      user,
		modeus:    modeus,
		redis:     redis,
		rootLogin: rootLogin,
		rootPass:  rootPass,
	}
}

// –¢–∞–∫–æ–π –Ω–µ–º–Ω–æ–≥–æ –∫–æ—Å—Ç—ã–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω –¥–æ –µ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
// –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –¥–æ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–ª–µ–Ω–∏—É–º –ø—Ä–æ—Å—Ç–æ —É–º—Ä–µ—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
func (p *parser) loadToken(login, password string) {
	for {
		time.Sleep(defaultTTL - time.Minute)
		token, err := p.modeus.ExtractToken(login, password, defaultParserTimeout)
		if err != nil {
			log.Errorf("%s/loadToken error parse token from selenium client: %p", parserServicePrefixLog, err)
			return // –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –ø–æ—Ç–æ–º—É —á—Ç–æ parseToken –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –µ—â–µ –æ–¥–Ω—É —Ç–∞–∫—É—é –∂–µ
		}
		if err = p.redis.Set(context.Background(), tokenPrefix+login, token, defaultTTL).Err(); err != nil {
			log.Errorf("%s/loadToken error save token into redis: %p", parserServicePrefixLog, err)
			return // –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –ø–æ—Ç–æ–º—É —á—Ç–æ parseToken –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç –µ—â–µ –æ–¥–Ω—É —Ç–∞–∫—É—é –∂–µ
		}
	}
}

func (p *parser) rootToken(ctx context.Context) (string, error) {
	return p.parseToken(ctx, p.rootLogin, p.rootPass)
}

func (p *parser) userToken(ctx context.Context, login, password string) (string, error) {
	return p.parseToken(ctx, login, password)
}

func (p *parser) parseToken(ctx context.Context, login, password string) (string, error) {
	token, err := p.redis.Get(ctx, tokenPrefix+login).Result()
	if err == nil && token != "" {
		return token, nil
	}
	token, err = p.modeus.ExtractToken(login, password, defaultParserTimeout)
	if err != nil {
		if errors.Is(err, modeus.ErrIncorrectInputData) {
			return "", ErrIncorrectLoginPassword
		}
		log.Errorf("%s/parseToken error parse token from selenium client: %s", parserServicePrefixLog, err)
		return "", err
	}
	if err = p.redis.Set(ctx, tokenPrefix+login, token, defaultTTL).Err(); err != nil {
		log.Errorf("%s/parseToken error save token into redis: %s", parserServicePrefixLog, err)
		return "", err
	}
	go p.loadToken(login, password)
	return token, nil
}
